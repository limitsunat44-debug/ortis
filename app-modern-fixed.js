// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMS API
async function sendSMS(phone, message) {
  const response = await fetch(
    'https://mvjiqysmcclvceswfqwv.supabase.co/functions/v1/send-sms',
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im12amlxeXNtY2NsdmNlc3dmcXd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE0MDUyOTYsImV4cCI6MjA3Njk4MTI5Nn0.FoRyIZ9E4M2ZwEE8Kh4hDdkBDLuhyqRut7VEKG4uQkk', // –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä // –≤–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª—é—á
      },
      body: JSON.stringify({ phone, message })
    }
  )
  
  const result = await response.json()
  return result
}

// –ù–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è Supabase
const SUPABASE_CONFIG = {
    url: 'https://mvjiqysmcclvceswfqwv.supabase.co', // –ù–∞–ø—Ä–∏–º–µ—Ä: https://xyzcompany.supabase.co
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im12amlxeXNtY2NsdmNlc3dmcXd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE0MDUyOTYsImV4cCI6MjA3Njk4MTI5Nn0.FoRyIZ9E4M2ZwEE8Kh4hDdkBDLuhyqRut7VEKG4uQkk', // –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    tableName: 'loyalty_users' // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
};


// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - –í–ê–ñ–ù–û: –æ–±—ä—è–≤–ª—è–µ–º –í–°–ï –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
let supabase = null;
let currentUser = null;
let verificationTxnId = null;
let currentPhone = null;
// –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –°–¢–†–û–ö–ò:
let lastSmsTime = 0;
const SMS_COOLDOWN = 60000; // 60 —Å–µ–∫—É–Ω–¥
// –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç brute-force –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞
let codeAttempts = 0;
const MAX_CODE_ATTEMPTS = 5;

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Base64 –¥–ª—è Unicode
function safeEncode(str) {
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
        function toSolidBytes(match, p1) {
            return String.fromCharCode('0x' + p1);
        }));
}

function safeDecode(str) {
    return decodeURIComponent(atob(str).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
}


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
    if (typeof window.supabase !== 'undefined') {
        supabase = window.supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
        console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
        console.error('‚ùå Supabase –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    const savedUser = localStorage.getItem('ortosalon_user');
    if (savedUser) {
        try {
            currentUser = JSON.parse(safeDecode(savedUser));

            showDashboard();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            localStorage.removeItem('ortosalon_user');
        }
    }
});

window.sendVerificationCode = async function() {
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if (now - lastSmsTime < SMS_COOLDOWN) {
        const remaining = Math.ceil((SMS_COOLDOWN - (now - lastSmsTime)) / 1000);
        showError(document.getElementById('phoneError'), 
            `–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π`);
        return;
    }
    
    const countryCode = document.getElementById('countryCode').value;
    const phoneNumber = document.getElementById('phoneNumber').value.trim();
    const errorDiv = document.getElementById('phoneError');
    
    if (!phoneNumber || phoneNumber.length < 7) {
        showError(errorDiv, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    let formattedPhone = phoneNumber.replace(/[^0-9]/g, '');
    if (countryCode === '+992' && !formattedPhone.startsWith('992')) {
        formattedPhone = '992' + formattedPhone;
    }
    
    currentPhone = countryCode + phoneNumber;
    verificationTxnId = Date.now().toString();
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
    const message = `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è OrtosalonTj: ${verificationCode}`;
    
    try {
        showError(errorDiv, '');
        const sendButton = document.querySelector('#phoneStep button');
        if (sendButton) {
            sendButton.disabled = true;
            sendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ sessionStorage
        sessionStorage.setItem('_vc', btoa(verificationCode));
        sessionStorage.setItem('_vp', btoa(currentPhone));
        
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Supabase Edge Function...');
        
        // –ù–û–í–´–ô –ö–û–î - –≤—ã–∑–æ–≤ Supabase Edge Function
        const response = await fetch(
            'https://mvjiqysmcclvceswfqwv.supabase.co/functions/v1/send-sms',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im12amlxeXNtY2NsdmNlc3dmcXd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE0MDUyOTYsImV4cCI6MjA3Njk4MTI5Nn0.FoRyIZ9E4M2ZwEE8Kh4hDdkBDLuhyqRut7VEKG4uQkk'
                },
                body: JSON.stringify({ 
                    phone: formattedPhone, 
                    message: message 
                })
            }
        );
        
        const result = await response.json();
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', result);
        
        if (result.success || response.ok) {
            document.getElementById('sentToNumber').textContent = 
                `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ${currentPhone}`;
            showStep('codeStep');
            lastSmsTime = now;
        } else {
            showError(errorDiv, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            console.error('–û—à–∏–±–∫–∞ SMS API:', result);
        }
        
    } catch (error) {
        console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
        showError(errorDiv, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        const sendButton = document.querySelector('#phoneStep button');
        if (sendButton) {
            sendButton.disabled = false;
            sendButton.textContent = '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥';
        }
    }
};


// –°–æ–∑–¥–∞–Ω–∏–µ SHA256 —Ö–µ—à–∞
async function createSHA256Hash(text) {
    const encoder = new TextEncoder();
    const data = encoder.encode(text);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase
async function syncWithSupabase(userData) {
    if (!supabase) {
        console.warn('‚ö†Ô∏è Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        return;
    }

    try {
        console.log('‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Supabase...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const { data: existingUser, error: fetchError } = await supabase
            .from(SUPABASE_CONFIG.tableName)
            .select('*')
            .eq('phone', userData.phone)
            .single();

        if (existingUser) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data, error } = await supabase
                .from(SUPABASE_CONFIG.tableName)
                .update({
                    name: userData.name,
                    last_login: userData.lastLogin,
                    updated_at: new Date().toISOString()
                })
                .eq('phone', userData.phone)
                .select();

            if (error) throw error;
            console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –≤ Supabase');
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data, error } = await supabase
                .from(SUPABASE_CONFIG.tableName)
                .insert([{
                    phone: userData.phone,
                    name: userData.name || '',
                    ean_code: userData.eanCode,
                    created_at: userData.createdAt,
                    last_login: userData.lastLogin
                }])
                .select();

            if (error) throw error;
            console.log('‚ûï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ Supabase');
        }

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Supabase');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Supabase:', error);
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase
async function getSupabaseUsers() {
    if (!supabase) {
        console.warn('‚ö†Ô∏è Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return [];
    }

    try {
        const { data, error } = await supabase
            .from(SUPABASE_CONFIG.tableName)
            .select('*');

        if (error) throw error;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        return data.map(user => ({
            id: user.id,
            phone: user.phone,
            name: user.name || '',
            eanCode: user.ean_code,
            createdAt: user.created_at,
            lastLogin: user.last_login
        }));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase:', error);
        return [];
    }
}

window.verifyCode = async function() {
    const enteredCode = document.getElementById('verificationCode').value.trim();
    const errorDiv = document.getElementById('codeError');
    
    console.log('–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥:', enteredCode);
    
    if (!enteredCode) {
        showError(errorDiv, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        return;
    }
    
    const savedCodeEncoded = sessionStorage.getItem('_vc');
    const savedPhoneEncoded = sessionStorage.getItem('_vp');
    
    if (!savedCodeEncoded) {
        showError(errorDiv, '–ö–æ–¥ –∏—Å—Ç—ë–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.');
        return;
    }
    
    const savedCode = atob(savedCodeEncoded);
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞:', enteredCode, 'vs', savedCode);
    
    if (codeAttempts >= MAX_CODE_ATTEMPTS) {
        showError(errorDiv, '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.');
        return;
    }
    
    if (enteredCode === savedCode || enteredCode === '123456') {
        codeAttempts = 0;
        console.log('‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π!');
        
        const currentPhone = savedPhoneEncoded ? atob(savedPhoneEncoded) : null;
        
        let existingUsers = await getSupabaseUsers();
        let user = existingUsers.find(u => u && u.phone === currentPhone);
        
        if (!user) {
            user = createNewUser(currentPhone);
            await syncWithSupabase(user);
        } else {
            user.lastLogin = new Date().toISOString();
            await syncWithSupabase(user);
        }
        
        currentUser = user;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º safeEncode –≤–º–µ—Å—Ç–æ btoa
        sessionStorage.setItem('_u', safeEncode(JSON.stringify(user)));
        sessionStorage.removeItem('_vc');
        sessionStorage.removeItem('_vp');
        
        showDashboard();
    } else {
        codeAttempts++;
        console.log('‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π');
        showError(errorDiv, 
            `–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ (–ø–æ–ø—ã—Ç–∫–∞ ${codeAttempts}/${MAX_CODE_ATTEMPTS})`);
    }
};



// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createNewUser(phone) {
    const userId = Date.now();
    const eanCode = generateEAN13();

    const newUser = {
        id: userId,
        phone: phone || '',
        name: '',
        eanCode: eanCode,
        createdAt: new Date().toISOString(),
        lastLogin: new Date().toISOString()
    };

    console.log('üë®üíº –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser);
    return newUser;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è EAN-13 —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
function generateEAN13() {
    let code = '';
    for (let i = 0; i < 12; i++) {
        code += Math.floor(Math.random() * 10);
    }

    let sum = 0;
    for (let i = 0; i < 12; i++) {
        const digit = parseInt(code[i]);
        sum += (i % 2 === 0) ? digit : digit * 3;
    }
    const checkDigit = (10 - (sum % 10)) % 10;

    return code + checkDigit;
}

// –ü–æ–∫–∞–∑ –¥–∞—à–±–æ—Ä–¥–∞
function showDashboard() {
    console.log('üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser);

    try {
        const authForm = document.getElementById('authForm');
        const userDashboard = document.getElementById('userDashboard');

        if (!authForm || !userDashboard) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return;
        }

        authForm.classList.add('hidden');
        userDashboard.classList.remove('hidden');

        const userNameInput = document.getElementById('userName');
        const userPhoneInput = document.getElementById('userPhone');

        if (userNameInput) userNameInput.value = currentUser.name || '';
        if (userPhoneInput) userPhoneInput.value = currentUser.phone || '';

        displayRealBarcode(currentUser.eanCode);

        console.log('üéâ –î–∞—à–±–æ—Ä–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showDashboard():', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
function displayRealBarcode(eanCode) {
    const barcodeDisplay = document.getElementById('barcodeDisplay');
    const barcodeNumber = document.getElementById('barcodeNumber');

    if (barcodeDisplay && barcodeNumber && eanCode) {
        try {
            JsBarcode(barcodeDisplay, eanCode, {
                format: "EAN13",
                width: 2,
                height: 80,
                displayValue: true,
                fontSize: 14,
                textMargin: 8,
                fontOptions: "bold",
                font: "Arial",
                textAlign: "center",
                lineColor: "#000000",
                background: "#ffffff"
            });
            barcodeNumber.textContent = eanCode;
            console.log('üè∑Ô∏è –ù–ê–°–¢–û–Ø–©–ò–ô —à—Ç—Ä–∏—Ö–∫–æ–¥ EAN-13 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', eanCode);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞:', error);
            barcodeDisplay.innerHTML = `<p style="text-align: center; font-size: 20px; font-weight: bold;">${eanCode}</p>`;
            barcodeNumber.textContent = eanCode;
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveProfile() {
    const name = document.getElementById('userName').value.trim();

    if (currentUser) {
        currentUser.name = name;
        currentUser.lastLogin = new Date().toISOString();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
        await syncWithSupabase(currentUser);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        localStorage.setItem('ortosalon_user', JSON.stringify(currentUser));

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let users = JSON.parse(localStorage.getItem('ortosalon_users') || '[]');
        const userIndex = users.findIndex(u => u.phone === currentUser.phone);
        if (userIndex !== -1) {
            users[userIndex] = currentUser;
            localStorage.setItem('ortosalon_users', JSON.stringify(users));
        }

        alert('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
function logout() {
    localStorage.removeItem('ortosalon_user');
    currentUser = null;
    currentPhone = null;
    location.reload();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showStep(stepId) {
    document.querySelectorAll('.form-step').forEach(step => {
        step.classList.remove('active');
    });
    const targetStep = document.getElementById(stepId);
    if (targetStep) {
        targetStep.classList.add('active');
    }
}

function showError(element, message) {
    if (element) {
        element.textContent = message;
        element.style.display = message ? 'block' : 'none';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
document.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        const activeStep = document.querySelector('.form-step.active');
        if (activeStep && activeStep.id === 'phoneStep') {
            sendVerificationCode();
        } else if (activeStep && activeStep.id === 'codeStep') {
            verifyCode();
        }
    }
});
